{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","items","setItems","turned","corrects","canClick","colors","useEffect","array","key","index","Math","floor","random","length","color","splice","console","log","push","className","map","item","id","onClick","includes","element","document","getElementById","classList","contains","removeAttribute","remove","style","backgroundColor","setAttribute","turned1","turned2","setTimeout","background","cursor","shift","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAqHeA,MAhHf,WAAgB,IAAD,EACaC,qBADb,mBACNC,EADM,KACCC,EADD,KAEPC,EAAS,GACTC,EAAW,GACbC,GAAW,EAEXC,EAAS,CACX,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAiEF,OA9DAC,qBAAU,WAGR,IAFA,IAAMC,EAAQ,GAELC,EAAM,EAAGA,EAAM,GAAIA,IAAO,CACjC,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWP,EAAOQ,QAC1CC,EAAQT,EAAOI,GACrBJ,EAAOU,OAAON,EAAO,GACrBO,QAAQC,IAAIZ,GAEZE,EAAMW,KAAK,CACTV,MACAM,UAGJb,EAASM,KACR,IA+CEP,EAGH,yBAAKmB,UAAU,aACb,yBAAKA,UAAU,kBACZnB,EAAMoB,KAAI,SAAAC,GAAI,OACb,yBACEC,GAAID,EAAKb,IACTA,IAAKa,EAAKb,IACVe,QAAS,kBACNpB,EAASqB,SAASH,EAAKb,MAAQJ,EAvD5C,YAAoC,IAAdI,EAAa,EAAbA,IAAKM,EAAQ,EAARA,MACnBW,EAAUC,SAASC,eAAenB,GAExC,GAAIiB,EAAQG,UAAUC,SAAS,UAC7BJ,EAAQK,gBAAgB,SACxBL,EAAQG,UAAUG,OAAO,eAKzB,GAHAN,EAAQO,MAAMC,gBAAkBnB,EAChCW,EAAQS,aAAa,QAAS,UAER,IAAlBhC,EAAOW,OACTX,EAAOgB,KAAK,CAACV,MAAKM,cACb,CACLV,GAAW,EAEXF,EAAOgB,KAAK,CAACV,MAAKM,UAElB,IAAMqB,EAAUT,SAASC,eAAezB,EAAO,GAAGM,KAC5C4B,EAAUV,SAASC,eAAezB,EAAO,GAAGM,KAElD6B,YAAW,WAEPnC,EAAO,GAAGY,QAAUZ,EAAO,GAAGY,OAC9BZ,EAAO,GAAGM,MAAQN,EAAO,GAAGM,KAE5B2B,EAAQH,MAAMM,WAAa,OAC3BF,EAAQJ,MAAMM,WAAa,OAC3BH,EAAQH,MAAMO,OAAS,UACvBH,EAAQJ,MAAMO,OAAS,UACvBpC,EAASe,KAAKhB,EAAO,GAAGM,IAAKN,EAAO,GAAGM,OAEvC2B,EAAQL,gBAAgB,SACxBK,EAAQP,UAAUG,OAAO,UACzBK,EAAQN,gBAAgB,SACxBM,EAAQR,UAAUG,OAAO,WAE3B7B,EAAOsC,QACPtC,EAAOsC,QAEPpC,GAAW,IACV,MAgBOqC,CAAYpB,GACZ,aAZG,MCpFDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASC,eAAe,SDyHpB,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.a4e8f43c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport './styles/global.css';\nimport './App.css';\n\nfunction App() {\n  const [items, setItems] = useState();\n  const turned = [];\n  const corrects = [];\n  let canClick = true;\n\n  let colors = [\n    '#7e40e29d',\n    '#7e40e29d',\n    '#4086e29d',\n    '#4086e29d',\n    '#4de2409d',\n    '#4de2409d',\n    '#dcec00ce',\n    '#dcec00ce',\n    '#ec8600b9',\n    '#ec8600b9',\n    '#002c12b7',\n    '#002c12b7',\n    '#2c0000b7',\n    '#2c0000b7',\n    '#af00a6b7',\n    '#af00a6b7',\n    '#04cec3b7',\n    '#04cec3b7',\n    '#fbfbfbb7',\n    '#fbfbfbb7'\n  ];\n\n  useEffect(() => {\n    const array = [];\n\n    for (let key = 0; key < 20; key++) {\n      const index = Math.floor(Math.random() * colors.length);\n      const color = colors[index];\n      colors.splice(index, 1);\n      console.log(colors);\n\n      array.push({\n        key,\n        color\n      });\n    }\n    setItems(array);\n  }, []);\n\n  function handleClick({key, color}) {\n    const element = document.getElementById(key);\n\n    if (element.classList.contains('turned')) {\n      element.removeAttribute('style');\n      element.classList.remove('turned');\n    } else {\n      element.style.backgroundColor = color;\n      element.setAttribute('class', 'turned');\n\n      if (turned.length === 0) {\n        turned.push({key, color});\n      } else {\n        canClick = false;\n\n        turned.push({key, color});\n\n        const turned1 = document.getElementById(turned[0].key);\n        const turned2 = document.getElementById(turned[1].key);\n\n        setTimeout(() => {\n          if (\n            turned[0].color === turned[1].color &&\n            turned[0].key !== turned[1].key\n          ) {\n            turned1.style.background = '#fff';\n            turned2.style.background = '#fff';\n            turned1.style.cursor = 'default';\n            turned2.style.cursor = 'default';\n            corrects.push(turned[0].key, turned[1].key);\n          } else {\n            turned1.removeAttribute('style');\n            turned1.classList.remove('turned');\n            turned2.removeAttribute('style');\n            turned2.classList.remove('turned');\n          }\n          turned.shift();\n          turned.shift();\n\n          canClick = true;\n        }, 500);\n      }\n    }\n  }\n\n  if (!items) return null;\n\n  return (\n    <div className='container'>\n      <div className='game-container'>\n        {items.map(item => (\n          <div\n            id={item.key}\n            key={item.key}\n            onClick={() =>\n              !corrects.includes(item.key) && canClick\n                ? handleClick(item)\n                : null\n            }\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}